@model ParallelTracker.Controllers.RepoDetailsVm
@inject CurrentResources CurrentResources
@{
	var repo = CurrentResources.Repo;
	ViewData["Title"] = $"{repo.FullName}";
	Layout = "~/Views/Shared/_RepoLayout.cshtml";
}

<div class="card mb-3">
	<div class="card-body p-2 px-3">@repo.Description</div>
</div>

<div class="d-flex flex-row align-items-center mb-3">
	<h3 class="flex-fill">Issues</h3>
	<a class="btn btn-primary" asp-controller="Issues" asp-action="Create" asp-route-repoId="@repo.Id">&#127775; New Issue</a>
</div>

<form asp-action="Details" method="get" class="form-inline d-flex flex-row ">
	<label class="sr-only" asp-for="Filter.Text"></label>
	<div class="input-group mb-2 mr-lg-2 flex-fill">
		<div class="input-group-prepend">
			<div class="input-group-text">Sort</div>
		</div>

		<select class="custom-select" asp-for="Filter.SortMode" asp-items="@Model.SortModeSelectList">
		</select>

		<input class="form-control w-50" asp-for="Filter.Text" placeholder="Search">

		<select class="custom-select" asp-for="Filter.Status" asp-items="@Model.IssueStatusSelectList">
		</select>

	</div>
	<div class="d-flex flex-row justify-content-between">
		<div class="btn-group mb-2">
			<label class="btn btn-outline-primary">
				<input class="mr-1" asp-for="Filter.YourIssues" autocomplete="off"> Your Issues
			</label>
		</div>
		<div class="btn-group ml-2 mb-3 mb-sm-2">
			<a asp-action="Details" class=" btn btn-secondary ">Clear</a>
			<button type="submit" class=" btn btn-primary">Filter</button>
		</div>
	</div>

</form>

@foreach (var issue in repo.Issues)
{
	<div class="card shadow-sm mb-2">
		<div class="card-body py-2">
			<div class="d-flex flex-row align-items-start">
				<h5 class="card-title my-0 mb-1">
					@if (issue.IsClosed)
					{
						<text>&#10004;</text>
					}
					else
					{
						<text>&#9888;</text>
					}
					<a class="ml-1 text-break" asp-controller="Issues" asp-action="Details" asp-route-id="@issue.Id">@issue.Title</a>
				</h5>
				<span class="badge badge-light ml-auto border py-1">&#128172; @issue.Comments.Count()</span>
			</div>
			<small class="card-subtitle mb-1 text-muted">
				#@issue.Id
				by <strong>@issue.Author.UserName</strong> on <strong>@issue.CreatedAt.ToString("d")</strong>
			</small>
		</div>
	</div>
}

@if (repo.Issues.Count() == 0)
{
	<div class="card mb-2">
		<div class="card-body text-center">
			The list is empty.
		</div>
	</div>
}

@{
	Model.TotalPages = Math.Max(Model.TotalPages, 1);

	var isOutOfBounds = Model.Page < 1 || Model.Page > Model.TotalPages;
	var isPrevDisabled = Model.Page <= 1 || isOutOfBounds;
	var isNextDisabled = Model.Page >= Model.TotalPages || isOutOfBounds;

	var query = System.Web.HttpUtility.ParseQueryString(Context.Request.QueryString.ToString());

	var actionUrl = Url.Action("Details", "Repos");

	query.Set("page", (Model.Page - 1).ToString());
	var prevPageUrl = actionUrl + "?" + query;
	query.Set("page", (Model.Page + 1).ToString());
	var nextPageUrl = actionUrl + "?" + query;

	<nav>
		<ul class="pagination justify-content-center">
			<li class="page-item @(isPrevDisabled ? "disabled" : "")">
				<a class="page-link" aria-label="Previous" href="@prevPageUrl">
					<span aria-hidden="true">&laquo;</span>
					<span class="sr-only">Previous</span>
				</a>
			</li>
			@for (int i = 1; i <= Model.TotalPages; i++)
			{
				query.Set("page", i.ToString());
				var pageUrl = actionUrl + "?" + query;
				<li class="page-item @(Model.Page == i ? "active" : "")">
					<a class="page-link" href="@pageUrl">@i</a>
				</li>
			}

			<li class="page-item @(isNextDisabled ? "disabled" : "")">
				<a class="page-link" aria-label="Next" href="@nextPageUrl">
					<span aria-hidden="true">&raquo;</span>
					<span class="sr-only">Next</span>
				</a>
			</li>
		</ul>
	</nav>
}
